// Configuration database avec cr√©ation automatique - backend/config/database.js

const { Sequelize } = require("sequelize");

// Fonction pour cr√©er la base de donn√©es si elle n'existe pas
const createDatabaseIfNotExists = async () => {
  // Connexion sans sp√©cifier de base de donn√©es
  const tempSequelize = new Sequelize({
    dialect: "mysql",
    host: process.env.DB_HOST || "localhost",
    port: process.env.DB_PORT || 3306,
    username: process.env.DB_USER || "root",
    password: process.env.DB_PASSWORD || "",
    // PAS de database ici pour pouvoir se connecter au serveur MySQL
    logging: false,
  });

  try {
    // Test de connexion au serveur MySQL
    await tempSequelize.authenticate();
    console.log("‚úÖ Connexion au serveur MySQL √©tablie");

    const databaseName = process.env.DB_NAME || "quiz_app";
    
    // V√©rifier si la base existe
    const [databases] = await tempSequelize.query(
      `SHOW DATABASES LIKE '${databaseName}'`
    );

    if (databases.length === 0) {
      // Cr√©er la base de donn√©es
      console.log(`üèóÔ∏è  Cr√©ation de la base de donn√©es: ${databaseName}`);
      await tempSequelize.query(`CREATE DATABASE \`${databaseName}\` CHARACTER SET utf8mb4 COLLATE utf8mb4_unicode_ci`);
      console.log(`‚úÖ Base de donn√©es ${databaseName} cr√©√©e`);
    } else {
      console.log(`üì¶ Base de donn√©es ${databaseName} existe d√©j√†`);
    }

  } catch (error) {
    console.error("‚ùå Erreur cr√©ation base de donn√©es:", error.message);
    throw error;
  } finally {
    // Fermer la connexion temporaire
    await tempSequelize.close();
  }
};

// Configuration principale Sequelize (avec database)
const sequelize = new Sequelize({
  dialect: "mysql",
  host: process.env.DB_HOST || "localhost",
  port: process.env.DB_PORT || 3306,
  database: process.env.DB_NAME || "quiz_app", // Maintenant la DB existe
  username: process.env.DB_USER || "root",
  password: process.env.DB_PASSWORD || "",

  // Options de configuration optimis√©es
  logging: process.env.NODE_ENV === "development" ? console.log : false,
  benchmark: process.env.NODE_ENV === "development",

  pool: {
    max: parseInt(process.env.DB_POOL_MAX) || 5,
    min: parseInt(process.env.DB_POOL_MIN) || 0,
    acquire: parseInt(process.env.DB_POOL_ACQUIRE) || 30000,
    idle: parseInt(process.env.DB_POOL_IDLE) || 10000,
    evict: parseInt(process.env.DB_POOL_EVICT) || 10000,
    handleDisconnects: true,
  },

  define: {
    timestamps: true,
    underscored: false,
    freezeTableName: true,
    charset: "utf8mb4",
    indexes: [], // Pas d'index automatiques
  },

  sync: {
    force: false,
    alter: false,
    indexes: false,
  },

  // Options MySQL2 valides uniquement
  dialectOptions: {
    charset: "utf8mb4",
    bigNumberStrings: false,
    supportBigNumbers: true,
    dateStrings: false,
    connectTimeout: 60000,
    acquireTimeout: 60000,
    timeout: 60000,
    debug: false,
    trace: false,
    multipleStatements: false,
  },

  timezone: "+01:00",

  retry: {
    max: 3,
    timeout: 5000,
    backoffBase: 1000,
    backoffExponent: 2,
  },

  hooks: false,
});

const connectDB = async () => {
  try {
    // 1. D'abord cr√©er la base si n√©cessaire
    await createDatabaseIfNotExists();

    // 2. Ensuite se connecter √† la base
    console.log("üîå Connexion √† la base de donn√©es...");
    await sequelize.authenticate();
    console.log("‚úÖ MySQL connect√© avec succ√®s");
    console.log(`üì¶ Base: ${process.env.DB_NAME || "quiz_app"}`);
    console.log(`üè† Host: ${process.env.DB_HOST || "localhost"}:${process.env.DB_PORT || 3306}`);
    
    // V√©rification de la version MySQL
    const [version] = await sequelize.query("SELECT VERSION() as version");
    console.log(`üóÑÔ∏è  MySQL version: ${version[0].version}`);

    // En d√©veloppement, diagnostic des tables
    if (process.env.NODE_ENV === "development") {
      await performDevelopmentChecks();
    }

    return sequelize;
    
  } catch (error) {
    console.error("‚ùå Erreur de connexion MySQL:", error.message);
    await handleConnectionError(error);
    process.exit(1);
  }
};

// V√©rifications en mode d√©veloppement
const performDevelopmentChecks = async () => {
  try {
    console.log("üîç V√©rifications mode d√©veloppement...");
    
    const [tables] = await sequelize.query(`
      SELECT TABLE_NAME 
      FROM INFORMATION_SCHEMA.TABLES 
      WHERE TABLE_SCHEMA = DATABASE()
    `);
    
    console.log(`üìä Tables trouv√©es: ${tables.length}`);
    
    if (tables.length === 0) {
      console.log("‚ö†Ô∏è  Aucune table trouv√©e");
      console.log("üí° Commandes disponibles:");
      console.log("   npm run sync:optimized  - Cr√©er toutes les tables");
      console.log("   npm run db:diagnose     - Diagnostiquer les index");
      return;
    }

    const [indexStats] = await sequelize.query(`
      SELECT 
        TABLE_NAME,
        COUNT(*) as index_count
      FROM INFORMATION_SCHEMA.STATISTICS 
      WHERE TABLE_SCHEMA = DATABASE() 
      GROUP BY TABLE_NAME
      ORDER BY index_count DESC
    `);

    console.log("üìã Index par table:");
    let hasProblems = false;
    
    indexStats.forEach(stat => {
      const status = stat.index_count > 15 ? "‚ö†Ô∏è " : 
                    stat.index_count > 25 ? "‚ùå" : "‚úÖ";
      
      console.log(`   ${status} ${stat.TABLE_NAME}: ${stat.index_count} index`);
      
      if (stat.index_count > 25) {
        hasProblems = true;
      }
    });

    if (hasProblems) {
      console.log("\nüö® PROBL√àME D√âTECT√â:");
      console.log("   Trop d'index sur certaines tables");
      console.log("üí° Solutions:");
      console.log("   npm run clean:indexes   - Nettoyer les doublons");
      console.log("   npm run sync:optimized  - Reset complet");
    }

  } catch (error) {
    console.log("‚ö†Ô∏è  Impossible d'effectuer les v√©rifications:", error.message);
  }
};

// Gestion sp√©cifique des erreurs de connexion
const handleConnectionError = async (error) => {
  if (error.original) {
    switch (error.original.code) {
      case "ER_ACCESS_DENIED_ERROR":
        console.error("üîê Acc√®s refus√©:");
        console.error("   - V√©rifiez DB_USER et DB_PASSWORD dans .env");
        console.error("   - V√©rifiez les permissions MySQL");
        console.error("   - Commande: GRANT ALL PRIVILEGES ON *.* TO 'user'@'localhost';");
        break;
        
      case "ECONNREFUSED":
        console.error("üîå Connexion refus√©e:");
        console.error("   - MySQL est-il d√©marr√© ?");
        console.error("   - Port correct ? (d√©faut: 3306)");
        console.error("   - Host accessible ?");
        console.error("   - Commandes Windows: net start mysql");
        console.error("   - Commandes Linux: sudo systemctl start mysql");
        break;
        
      case "ER_BAD_DB_ERROR":
        console.error("üì¶ Base de donn√©es introuvable:");
        console.error("   - Ce probl√®me devrait √™tre r√©solu automatiquement");
        console.error("   - Si persiste, cr√©ez manuellement:");
        console.error(`   - CREATE DATABASE ${process.env.DB_NAME || "quiz_app"};`);
        break;
        
      case "ER_TOO_MANY_KEYS":
        console.error("üîë TROP D'INDEX:");
        console.error("   Solution: npm run clean:indexes");
        break;
        
      case "ER_DBACCESS_DENIED_ERROR":
        console.error("üö´ Acc√®s refus√© √† la base:");
        console.error("   - L'utilisateur n'a pas les droits sur cette base");
        console.error(`   - GRANT ALL ON ${process.env.DB_NAME || "quiz_app"}.* TO '${process.env.DB_USER || "root"}'@'localhost';`);
        break;
        
      default:
        console.error(`üí• Erreur MySQL: ${error.original.code}`);
        console.error("   Message:", error.original.message);
    }
  } else {
    console.error("üí• Erreur inconnue:", error.message);
  }
};

// Fonction utilitaire: v√©rifier l'√©tat des index
const checkIndexHealth = async () => {
  try {
    const [problematicTables] = await sequelize.query(`
      SELECT 
        TABLE_NAME,
        COUNT(*) as index_count
      FROM INFORMATION_SCHEMA.STATISTICS 
      WHERE TABLE_SCHEMA = DATABASE() 
      GROUP BY TABLE_NAME
      HAVING COUNT(*) > 20
      ORDER BY index_count DESC
    `);

    if (problematicTables.length > 0) {
      console.log("‚ö†Ô∏è  Tables avec trop d'index:");
      problematicTables.forEach(table => {
        console.log(`   ${table.TABLE_NAME}: ${table.index_count} index`);
      });
      return false;
    }

    console.log("‚úÖ Sant√© des index OK");
    return true;
    
  } catch (error) {
    console.error("‚ùå Erreur v√©rification index:", error.message);
    return false;
  }
};

// Fonction de synchronisation ultra-s√©curis√©e
const safeSyncModels = async (options = {}) => {
  try {
    console.log("üîÑ Synchronisation ultra-s√©curis√©e...");
    
    if (!options.force) {
      const healthy = await checkIndexHealth();
      if (!healthy) {
        console.log("‚ùå Index en mauvais √©tat - synchronisation annul√©e");
        console.log("üí° Utilisez { force: true } ou nettoyez les index");
        return false;
      }
    }

    await sequelize.sync({
      force: false,
      alter: false,
      hooks: false,
      logging: false,
    });

    console.log("‚úÖ Synchronisation s√©curis√©e OK");
    return true;

  } catch (error) {
    console.error("‚ùå Erreur synchronisation:", error.message);
    
    if (error.original?.code === "ER_TOO_MANY_KEYS") {
      console.error("üîë Probl√®me d'index pendant la sync");
      console.error("üí° Nettoyage requis: npm run clean:indexes");
    }
    
    return false;
  }
};

// Fermeture propre avec timeout
const gracefulShutdown = async (signal) => {
  console.log(`\nüîå Signal ${signal} - fermeture MySQL...`);
  
  const shutdownTimeout = setTimeout(() => {
    console.error("‚è∞ Timeout fermeture - for√ßage");
    process.exit(1);
  }, 5000);

  try {
    await sequelize.close();
    clearTimeout(shutdownTimeout);
    console.log("‚úÖ MySQL ferm√© proprement");
    process.exit(0);
  } catch (error) {
    console.error("‚ùå Erreur fermeture:", error.message);
    clearTimeout(shutdownTimeout);
    process.exit(1);
  }
};

// Gestionnaires de signaux
process.on("SIGINT", () => gracefulShutdown("SIGINT"));
process.on("SIGTERM", () => gracefulShutdown("SIGTERM"));

// Gestion des rejets non captur√©s
process.on("unhandledRejection", (reason, promise) => {
  console.error("‚ùå Rejection non g√©r√©e:", reason?.message || reason);
  
  if (reason?.original?.code === "ER_TOO_MANY_KEYS") {
    console.error("üí° Probl√®me d'index d√©tect√©");
    console.error("   Red√©marrez apr√®s: npm run clean:indexes");
  }
});

module.exports = { 
  sequelize, 
  connectDB, 
  checkIndexHealth, 
  safeSyncModels,
  performDevelopmentChecks,
  createDatabaseIfNotExists
};
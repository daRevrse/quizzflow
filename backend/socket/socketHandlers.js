const jwt = require("jsonwebtoken");
const { Session, Quiz, User } = require("../models");

// Middleware d'authentification optimis√©
const authenticateSocket = async (socket, next) => {
  try {
    const token =
      socket.handshake.auth.token ||
      socket.handshake.headers.authorization?.split(" ")[1];

    if (token) {
      const decoded = jwt.verify(token, process.env.JWT_SECRET);
      const user = await User.findByPk(decoded.userId, {
        attributes: { exclude: ["password"] },
      });

      if (user && user.isActive) {
        socket.user = user;
      }
    }

    next();
  } catch (error) {
    console.log("Erreur d'authentification Socket.IO:", error.message);
    next(); // Permettre les connexions anonymes
  }
};

const socketHandlers = (io) => {
  io.use(authenticateSocket);

  const timerDebugInfo = new Map();
const activeQuestionTimers = new Map(); 

function calculateSessionStats(sessionData) {
  const participants = Array.isArray(sessionData.participants) ? sessionData.participants : [];
  const responses = sessionData.responses || {};
  
  console.log(`üìä Calcul stats session - ${participants.length} participants`);
  
  const totalParticipants = participants.length;
  
  // Calculer le nombre total de r√©ponses
  const totalResponses = Object.keys(responses).reduce((total, questionId) => {
    const questionResponses = responses[questionId];
    return total + (Array.isArray(questionResponses) ? questionResponses.length : 0);
  }, 0);
  
  // Calculer les statistiques des participants
  let totalScore = 0;
  let activeParticipants = 0;
  let totalCorrectAnswers = 0;
  let totalQuestionsAnswered = 0;
  let totalTimeSpent = 0;
  let bestScore = 0;
  let worstScore = Number.MAX_SAFE_INTEGER;
  
  participants.forEach((participant) => {
    if (participant && typeof participant === "object") {
      const score = participant.score || 0;
      const correctAnswers = participant.correctAnswers || 0;
      const totalQuestions = participant.totalQuestions || 0;
      
      if (typeof score === "number" && !isNaN(score)) {
        totalScore += score;
        activeParticipants++;
        
        bestScore = Math.max(bestScore, score);
        if (worstScore === Number.MAX_SAFE_INTEGER) {
          worstScore = score;
        } else {
          worstScore = Math.min(worstScore, score);
        }
      }
      
      totalCorrectAnswers += correctAnswers;
      totalQuestionsAnswered += totalQuestions;
      
      // Calculer le temps total pass√© par le participant
      if (participant.responses) {
        Object.values(participant.responses).forEach(response => {
          if (response && typeof response.timeSpent === 'number') {
            totalTimeSpent += response.timeSpent;
          }
        });
      }
    }
  });
  
  // Calculer les moyennes
  const averageScore = activeParticipants > 0 
    ? Math.round((totalScore / activeParticipants) * 100) / 100 
    : 0;
    
  const participationRate = totalParticipants > 0 
    ? Math.round((activeParticipants / totalParticipants) * 100) 
    : 0;
    
  const accuracyRate = totalQuestionsAnswered > 0 
    ? Math.round((totalCorrectAnswers / totalQuestionsAnswered) * 100) 
    : 0;
    
  const averageTimePerQuestion = totalQuestionsAnswered > 0 
    ? Math.round(totalTimeSpent / totalQuestionsAnswered) 
    : 0;
  
  // R√©initialiser les scores min/max si pas de participants actifs
  if (activeParticipants === 0) {
    bestScore = 0;
    worstScore = 0;
  }
  
  // Calculer les stats par question
  const questionStats = {};
  Object.keys(responses).forEach(questionId => {
    const questionResponses = responses[questionId];
    if (Array.isArray(questionResponses)) {
      const correctCount = questionResponses.filter(r => r.isCorrect).length;
      const avgTime = questionResponses.length > 0 
        ? questionResponses.reduce((sum, r) => sum + (r.timeSpent || 0), 0) / questionResponses.length 
        : 0;
      
      questionStats[questionId] = {
        totalResponses: questionResponses.length,
        correctResponses: correctCount,
        accuracyRate: questionResponses.length > 0 
          ? Math.round((correctCount / questionResponses.length) * 100) 
          : 0,
        averageTimeSpent: Math.round(avgTime),
        responseRate: totalParticipants > 0 
          ? Math.round((questionResponses.length / totalParticipants) * 100) 
          : 0
      };
    }
  });
  
  const stats = {
    // Stats g√©n√©rales
    totalParticipants,
    activeParticipants,
    totalResponses,
    
    // Stats de performance
    averageScore,
    bestScore,
    worstScore,
    totalCorrectAnswers,
    totalQuestionsAnswered,
    accuracyRate,
    
    // Stats d'engagement
    participationRate,
    averageTimePerQuestion,
    totalTimeSpent,
    
    // Stats d√©taill√©es par question
    questionStats,
    
    // Timestamps
    calculatedAt: new Date(),
  };
  
  console.log(`üìä Stats calcul√©es:`, {
    totalParticipants: stats.totalParticipants,
    averageScore: stats.averageScore,
    accuracyRate: stats.accuracyRate,
    participationRate: stats.participationRate
  });
  
  return stats;
}

  function debugTimer(sessionId, action, details = {}) {
    const timestamp = new Date().toISOString();
    console.log(`‚è∞ [${timestamp}] TIMER DEBUG - Session ${sessionId}:`);
    console.log(`   Action: ${action}`);
    console.log(`   D√©tails:`, details);
    console.log(`   Timers actifs: ${activeQuestionTimers.size}`);
    console.log(`   Timer pour cette session: ${activeQuestionTimers.has(sessionId) ? 'OUI' : 'NON'}`);
    
    // Stocker l'info de debug
    if (!timerDebugInfo.has(sessionId)) {
      timerDebugInfo.set(sessionId, []);
    }
    timerDebugInfo.get(sessionId).push({
      timestamp,
      action,
      details
    });
  }
  
  // Fonction pour d√©marrer le timer automatique d'une question
  function startQuestionTimer(sessionId, questionIndex, timeLimit) {
    debugTimer(sessionId, "START_TIMER", {
      questionIndex,
      timeLimit,
      existingTimer: activeQuestionTimers.has(sessionId)
    });
  
    // Nettoyer le timer pr√©c√©dent s'il existe
    if (activeQuestionTimers.has(sessionId)) {
      clearTimeout(activeQuestionTimers.get(sessionId));
      debugTimer(sessionId, "CLEAR_EXISTING_TIMER");
    }
  
    console.log(`‚è∞ === D√âMARRAGE TIMER ===`);
    console.log(`   Session: ${sessionId}`);
    console.log(`   Question: ${questionIndex}`);
    console.log(`   Dur√©e: ${timeLimit}s`);
    console.log(`   Fin pr√©vue: ${new Date(Date.now() + timeLimit * 1000).toISOString()}`);
    
    const timerId = setTimeout(async () => {
      console.log(`\nüö® === TIMER EXPIR√â ===`);
      console.log(`   Session: ${sessionId}`);
      console.log(`   Question: ${questionIndex}`);
      console.log(`   Heure: ${new Date().toISOString()}`);
      
      debugTimer(sessionId, "TIMER_EXPIRED", { questionIndex });
      
      try {
        console.log(`üîç Recherche session ${sessionId} pour avancement auto...`);
        
        const session = await Session.findByPk(sessionId, {
          include: [{ model: Quiz, as: "quiz" }],
        });
    
        if (!session) {
          console.log(`‚ùå Session ${sessionId} non trouv√©e`);
          debugTimer(sessionId, "SESSION_NOT_FOUND");
          return;
        }
    
        console.log(`‚úÖ Session trouv√©e: ${session.code} (status: ${session.status})`);
    
        if (session.status !== "active") {
          console.log(`‚ö†Ô∏è Session ${sessionId} non active (${session.status}), timer annul√©`);
          debugTimer(sessionId, "SESSION_NOT_ACTIVE", { status: session.status });
          return;
        }
    
        const totalQuestions = session.quiz?.questions?.length || 0;
        console.log(`üìä Questions: ${questionIndex + 1}/${totalQuestions}`);
        
        if (questionIndex >= totalQuestions - 1) {// CORRECTION: Derni√®re question - terminer proprement la session
          console.log(`üèÅ === DERNI√àRE QUESTION TERMIN√âE ===`);
          console.log(`   Fin automatique de session ${sessionId}`);
          
          debugTimer(sessionId, "AUTO_END_SESSION", { questionIndex, totalQuestions });
          
          // CORRECTION: V√©rifier le statut avant de terminer
          if (session.status === "finished") {
            console.log(`‚ö†Ô∏è Session ${sessionId} d√©j√† termin√©e, pas d'action n√©cessaire`);
            debugTimer(sessionId, "SESSION_ALREADY_FINISHED");
            return;
          }
        
          if (!["active", "paused"].includes(session.status)) {
            console.log(`‚ö†Ô∏è Session ${sessionId} dans un √©tat non terminable: ${session.status}`);
            debugTimer(sessionId, "SESSION_NOT_TERMINABLE", { status: session.status });
            return;
          }
        
          try {
            // Utiliser la m√©thode endSession du mod√®le
            await session.endSession();
            
            // Calculer les stats finales
            const finalStats = calculateSessionStats({
              participants: session.participants,
              responses: session.responses,
            });
            
            await session.update({ stats: finalStats });
        
            console.log(`üì¢ Notification fin de session automatique`);
            
            // Notification uniforme avec status "finished"
            const endNotification = {
              sessionId,
              finalStats: finalStats,
              message: "Session termin√©e automatiquement - temps √©coul√©",
              autoEnded: true,
              endedAt: session.endedAt,
              reason: "timer_expired"
            };
        
            // Notifier tous les participants
            io.to(`session_${sessionId}`).emit("session_ended", endNotification);
        
            // Notifier l'h√¥te sp√©cifiquement
            io.to(`host_${sessionId}`).emit("session_ended", {
              ...endNotification,
              isHost: true
            });
        
            console.log(`‚úÖ Session ${sessionId} termin√©e automatiquement`);
        
          } catch (endError) {
            console.error(`‚ùå Erreur lors de la fin automatique de session ${sessionId}:`, endError);
            
            // Si l'erreur indique que la session est d√©j√† termin√©e, ce n'est pas grave
            if (endError.message?.includes("termin√©e") || endError.message?.includes("finished")) {
              console.log(`‚ö†Ô∏è Session ${sessionId} √©tait d√©j√† termin√©e - pas d'erreur r√©elle`);
              debugTimer(sessionId, "SESSION_ALREADY_FINISHED_ON_END");
            } else {
              // Pour d'autres erreurs, on les log mais on continue
              console.error(`‚ùå Erreur inattendue fin automatique session ${sessionId}:`, endError);
              debugTimer(sessionId, "AUTO_END_ERROR", { error: endError.message });
            }
          }} else {
          // Passer √† la question suivante (code existant)
          const newIndex = questionIndex + 1;
          const nextQuestion = session.quiz.questions[newIndex];
          
          console.log(`‚û°Ô∏è === PASSAGE AUTOMATIQUE ===`);
          console.log(`   Session: ${sessionId}`);
          console.log(`   De question ${questionIndex} vers ${newIndex}`);
          console.log(`   Nouvelle question: "${nextQuestion?.question?.substring(0, 50)}..."`);
          
          debugTimer(sessionId, "AUTO_NEXT_QUESTION", { 
            from: questionIndex, 
            to: newIndex,
            nextQuestionTimeLimit: nextQuestion?.timeLimit 
          });
          
          await session.update({
            currentQuestionIndex: newIndex,
            currentQuestionStartedAt: new Date(),
          });
    
          console.log(`üì¢ Notification nouvelle question automatique`);
    
          // Notifier tous les participants
          io.to(`session_${sessionId}`).emit("next_question", {
            sessionId,
            questionIndex: newIndex,
            question: nextQuestion,
            startedAt: new Date(),
            autoAdvanced: true
          });
    
          // Notifier l'h√¥te sp√©cifiquement  
          io.to(`host_${sessionId}`).emit("next_question", {
            sessionId,
            questionIndex: newIndex,
            question: nextQuestion,
            startedAt: new Date(),
            autoAdvanced: true,
            isHost: true
          });
    
          console.log(`‚úÖ Passage automatique vers question ${newIndex + 1} r√©ussi`);
    
          // D√©marrer le timer pour la nouvelle question si elle a une limite de temps
          if (nextQuestion && nextQuestion.timeLimit) {
            console.log(`‚è∞ D√©marrage timer pour nouvelle question: ${nextQuestion.timeLimit}s`);
            startQuestionTimer(sessionId, newIndex, nextQuestion.timeLimit);
          } else {
            console.log(`‚è∞ Pas de timer pour la nouvelle question`);
          }
        }
    
      } catch (error) {
        console.error(`üí• === ERREUR TIMER AUTOMATIQUE ===`);
        console.error(`   Session: ${sessionId}`);
        console.error(`   Question: ${questionIndex}`);
        console.error(`   Error:`, error);
        
        debugTimer(sessionId, "TIMER_ERROR", { 
          error: error.message,
          stack: error.stack?.split('\n')[0]
        });
      } finally {
        // Nettoyer le timer
        activeQuestionTimers.delete(sessionId);
        debugTimer(sessionId, "TIMER_CLEANED");
        console.log(`üßπ Timer nettoy√© pour session ${sessionId}\n`);
      }
    }, timeLimit * 1000);
  
    // Stocker le timer
    activeQuestionTimers.set(sessionId, timerId);
    debugTimer(sessionId, "TIMER_STORED", { timerId: timerId.toString() });
    
    console.log(`‚úÖ Timer d√©marr√© et stock√© pour session ${sessionId}`);
    console.log(`   Timer ID: ${timerId}`);
    console.log(`   Timers actifs total: ${activeQuestionTimers.size}\n`);
  }
  
  
  // Fonction pour arr√™ter le timer d'une session
  function stopQuestionTimer(sessionId, reason = "manual") {
    debugTimer(sessionId, "STOP_TIMER", { reason });
    
    if (activeQuestionTimers.has(sessionId)) {
      clearTimeout(activeQuestionTimers.get(sessionId));
      activeQuestionTimers.delete(sessionId);
      console.log(`‚èπÔ∏è Timer arr√™t√© pour session ${sessionId} (${reason})`);
    } else {
      console.log(`‚ö†Ô∏è Aucun timer actif √† arr√™ter pour session ${sessionId}`);
    }
  }

  io.on("connection", (socket) => {
    console.log(
      `üîå Nouvelle connexion Socket.IO: ${socket.id} ${
        socket.user ? `(${socket.user.username})` : "(anonyme)"
      }`
    );

    // √âv√©nements de gestion des sessions
    socket.on("join_session", handleJoinSession);
    socket.on("leave_session", handleLeaveSession);
    socket.on("host_session", handleHostSession);

    // √âv√©nements pour les h√¥tes seulement
    socket.on("start_session", handleStartSession);
    socket.on("pause_session", handlePauseSession);
    socket.on("resume_session", handleResumeSession);
    socket.on("end_session", handleEndSession);
    socket.on("next_question", handleNextQuestion);
    socket.on("previous_question", handlePreviousQuestion);

    // √âv√©nements pour les participants seulement
    socket.on("submit_answer", handleSubmitResponse);
    socket.on("submit_response", handleSubmitResponse);
    socket.on("participant_ready", handleParticipantReady);
    socket.on("participant_heartbeat", handleParticipantHeartbeat);

    // Chat
    socket.on("send_message", handleSendMessage);

    // D√©connexion
    socket.on("disconnect", handleDisconnect);

    // Gestion des erreurs
    socket.on("error", (error) => {
      console.error("Erreur Socket.IO:", error);
    });
  });

  async function handleNextQuestion() {
    const socket = this;
    if (!socket.isHost || !socket.sessionId) {
      return socket.emit("error", { message: "Permission insuffisante" });
    }
  
    try {
      const session = await Session.findByPk(socket.sessionId, {
        include: [{ model: Quiz, as: "quiz" }],
      });
  
      if (!session) {
        return socket.emit("error", { message: "Session non trouv√©e" });
      }
  
      const totalQuestions = session.quiz?.questions?.length || 0;
      const currentIndex = session.currentQuestionIndex || 0;
  
      if (currentIndex >= totalQuestions - 1) {
        return socket.emit("error", { message: "Derni√®re question atteinte" });
      }
  
      // Arr√™ter le timer de la question courante
      stopQuestionTimer(session.id);
  
      const newIndex = currentIndex + 1;
      const nextQuestion = session.quiz.questions[newIndex];
      
      await session.update({
        currentQuestionIndex: newIndex,
        currentQuestionStartedAt: new Date(),
      });
  
      // AJOUT: D√©marrer le timer pour la nouvelle question
      if (nextQuestion && nextQuestion.timeLimit) {
        startQuestionTimer(session.id, newIndex, nextQuestion.timeLimit);
        console.log(`‚è∞ Timer d√©marr√© pour question ${newIndex + 1}: ${nextQuestion.timeLimit}s`);
      }
  
      io.to(`session_${session.id}`).emit("next_question", {
        sessionId: session.id,
        questionIndex: newIndex,
        question: nextQuestion,
        startedAt: new Date(),
      });
  
      console.log(`‚û°Ô∏è Passage manuel √† la question ${newIndex + 1}`);
    } catch (error) {
      console.error("Erreur question suivante:", error);
      socket.emit("error", {
        message: "Erreur lors du passage √† la question suivante",
      });
    }
  }
  
  // MODIFICATION du handler end session
  async function handleEndSession() {
    const socket = this;
    if (!socket.isHost || !socket.sessionId) {
      return socket.emit("error", { message: "Permission insuffisante" });
    }
  
    try {
      // Arr√™ter le timer automatique
      stopQuestionTimer(socket.sessionId, "manual_end");
  
      const session = await Session.findByPk(socket.sessionId, {
        include: [{ model: Quiz, as: "quiz" }],
      });
      
      if (!session) {
        return socket.emit("error", { message: "Session non trouv√©e" });
      }
  
      // CORRECTION: G√©rer le cas o√π la session est d√©j√† termin√©e
      if (session.status === "finished") {
        console.log(`‚ö†Ô∏è Session ${session.id} d√©j√† termin√©e, envoi confirmation`);
        
        // Confirmer que la session est termin√©e sans erreur
        socket.emit("session_ended", {
          sessionId: session.id,
          finalStats: session.stats || {},
          message: "Session d√©j√† termin√©e",
          autoEnded: false,
          endedAt: session.endedAt,
          alreadyFinished: true
        });
        
        return;
      }
  
      // V√©rifier que la session peut √™tre termin√©e
      if (!["active", "paused"].includes(session.status)) {
        return socket.emit("error", { 
          message: `Impossible de terminer une session avec le statut "${session.status}"`,
          currentStatus: session.status,
          code: "INVALID_SESSION_STATUS"
        });
      }
  
      console.log(`üèÅ Fin manuelle de session ${session.code} depuis Socket.IO`);
  
      // Utiliser la m√©thode endSession du mod√®le
      await session.endSession();
      await session.reload();
  
      // Calculer les stats finales
      const finalStats = calculateSessionStats({
        participants: session.participants,
        responses: session.responses,
      });
      
      await session.update({ stats: finalStats });
  
      console.log(`‚úÖ Session ${session.code} termin√©e manuellement via Socket.IO`);
  
      // Notifier tous les participants
      io.to(`session_${session.id}`).emit("session_ended", {
        sessionId: session.id,
        finalStats: finalStats,
        message: "Session termin√©e par l'h√¥te",
        autoEnded: false,
        endedAt: session.endedAt,
        manualEnd: true
      });
  
      // Notifier sp√©cifiquement l'h√¥te
      socket.emit("session_ended", {
        sessionId: session.id,
        finalStats: finalStats,
        message: "Session termin√©e avec succ√®s",
        autoEnded: false,
        endedAt: session.endedAt,
        manualEnd: true,
        isHost: true
      });
  
      // Nettoyer le timer de la Map
      activeQuestionTimers.delete(session.id);
  
    } catch (error) {
      console.error("Erreur fin de session Socket.IO:", error);
      
      // Gestion sp√©cifique des erreurs de statut
      if (error.message?.includes("statut") || error.message?.includes("termin√©e")) {
        socket.emit("error", { 
          message: error.message,
          code: "INVALID_SESSION_STATUS",
          currentStatus: session?.status
        });
      } else {
        socket.emit("error", { 
          message: "Erreur lors de la fin de session",
          code: "END_SESSION_ERROR",
          details: process.env.NODE_ENV === "development" ? error.message : undefined
        });
      }
    }
  }
  
  // MODIFICATION du handler pause session
  async function handlePauseSession() {
    const socket = this;
    if (!socket.isHost || !socket.sessionId) {
      return socket.emit("error", { message: "Permission insuffisante" });
    }
  
    try {
      // Arr√™ter le timer pendant la pause
      stopQuestionTimer(socket.sessionId);
  
      const session = await Session.findByPk(socket.sessionId);
      if (!session || session.status !== "active") {
        return socket.emit("error", {
          message: "Impossible de mettre en pause",
        });
      }
  
      await session.update({ status: "paused" });
      io.to(`session_${session.id}`).emit("session_paused", {
        sessionId: session.id,
      });
  
      console.log(`‚è∏Ô∏è Session ${session.code} mise en pause, timer arr√™t√©`);
    } catch (error) {
      console.error("Erreur lors de la pause:", error);
      socket.emit("error", { message: "Erreur lors de la pause" });
    }
  }
  
  // MODIFICATION du handler resume session
  async function handleResumeSession() {
    const socket = this;
    if (!socket.isHost || !socket.sessionId) {
      return socket.emit("error", { message: "Permission insuffisante" });
    }
  
    try {
      const session = await Session.findByPk(socket.sessionId, {
        include: [{ model: Quiz, as: "quiz" }],
      });
  
      if (!session || session.status !== "paused") {
        return socket.emit("error", { message: "Impossible de reprendre" });
      }
  
      await session.update({
        status: "active",
        currentQuestionStartedAt: new Date(),
      });
  
      // AJOUT: Red√©marrer le timer pour la question courante
      const currentQuestionIndex = session.currentQuestionIndex || 0;
      const currentQuestion = session.quiz?.questions?.[currentQuestionIndex];
      
      if (currentQuestion && currentQuestion.timeLimit) {
        startQuestionTimer(session.id, currentQuestionIndex, currentQuestion.timeLimit);
        console.log(`‚è∞ Timer red√©marr√© apr√®s pause: ${currentQuestion.timeLimit}s`);
      }
  
      io.to(`session_${session.id}`).emit("session_resumed", {
        sessionId: session.id,
        resumedAt: new Date(),
      });
  
      console.log(`‚ñ∂Ô∏è Session ${session.code} reprise, timer red√©marr√©`);
    } catch (error) {
      console.error("Erreur lors de la reprise:", error);
      socket.emit("error", { message: "Erreur lors de la reprise" });
    }
  }

  async function handleJoinSession(data) {
    const socket = this;

    try {
      console.log(`\nüéØ === DEBUT handleJoinSession ===`);
      console.log(`   Socket ID: ${socket.id}`);
      console.log(`   User: ${socket.user ? socket.user.username : "anonyme"}`);
      console.log(`   Data brute re√ßue:`, JSON.stringify(data, null, 2));

      // Validation des donn√©es re√ßues
      if (!data || typeof data !== "object") {
        console.log(`‚ùå Donn√©es invalides:`, typeof data);
        return socket.emit("error", {
          message: "Donn√©es manquantes ou invalides",
          code: "INVALID_DATA",
          received: data,
        });
      }

      let sessionCode,
        participantName,
        isAnonymous,
        participantId = null;

      // üîß D√âTECTION DU FORMAT ET EXTRACTION FLEXIBLE - AJOUT DU 3√®me FORMAT
      if (data.sessionCode && data.participantName) {
        // Format 1 : { sessionCode, participantName, isAnonymous }
        console.log(`üìã Format standard d√©tect√©`);
        sessionCode = data.sessionCode;
        participantName = data.participantName;
        isAnonymous = data.isAnonymous;
      } else if (data.sessionId && data.participant) {
        // Format 2 : { sessionId, participant: { name, ... } }
        console.log(`üìã Format alternatif d√©tect√© (sessionId + participant)`);

        // Chercher la session par ID pour r√©cup√©rer le code
        try {
          const sessionById = await Session.findByPk(data.sessionId, {
            attributes: ["id", "code", "status"],
          });

          if (!sessionById) {
            console.log(`‚ùå Session non trouv√©e avec ID: ${data.sessionId}`);
            return socket.emit("error", {
              message: "Session non trouv√©e",
              code: "SESSION_NOT_FOUND",
              searchedId: data.sessionId,
            });
          }

          sessionCode = sessionById.code;
          participantName = data.participant.name;
          isAnonymous = data.participant.isAnonymous || false;

          console.log(
            `‚úÖ Session trouv√©e par ID, code r√©cup√©r√©: ${sessionCode}`
          );
        } catch (error) {
          console.error(`‚ùå Erreur lors de la recherche par ID:`, error);
          return socket.emit("error", {
            message: "Erreur lors de la recherche de session",
            code: "SESSION_LOOKUP_ERROR",
          });
        }
      } else if (
        data.sessionId &&
        data.participantId &&
        data.role === "participant"
      ) {
        // Format 3 : { sessionId, participantId, role } - NOUVEAU FORMAT
        console.log(
          `üìã Format connexion Socket d√©tect√© (reconnexion participant)`
        );

        try {
          // R√©cup√©rer la session par ID
          const sessionById = await Session.findByPk(data.sessionId, {
            attributes: ["id", "code", "status", "participants"],
          });

          if (!sessionById) {
            console.log(`‚ùå Session non trouv√©e avec ID: ${data.sessionId}`);
            return socket.emit("error", {
              message: "Session non trouv√©e",
              code: "SESSION_NOT_FOUND",
              searchedId: data.sessionId,
            });
          }

          // Chercher le participant dans la liste existante
          let participants = sessionById.participants;
          if (typeof participants === "string") {
            participants = JSON.parse(participants);
          }
          if (!Array.isArray(participants)) {
            participants = [];
          }

          const existingParticipant = participants.find(
            (p) => p && p.id === data.participantId
          );

          if (!existingParticipant) {
            console.log(
              `‚ùå Participant non trouv√© avec ID: ${data.participantId}`
            );
            return socket.emit("error", {
              message: "Participant non trouv√© dans cette session",
              code: "PARTICIPANT_NOT_FOUND",
              participantId: data.participantId,
            });
          }

          // Utiliser les donn√©es du participant existant
          sessionCode = sessionById.code;
          participantName = existingParticipant.name;
          isAnonymous = existingParticipant.isAnonymous || false;
          participantId = data.participantId; // R√©utiliser l'ID existant

          console.log(
            `‚úÖ Reconnexion participant: ${participantName} (${participantId})`
          );
        } catch (error) {
          console.error(`‚ùå Erreur lors de la reconnexion:`, error);
          return socket.emit("error", {
            message: "Erreur lors de la reconnexion",
            code: "RECONNECTION_ERROR",
          });
        }
      } else {
        // Format non reconnu
        console.log(`‚ùå Format de donn√©es non reconnu:`, {
          hasSessionCode: !!data.sessionCode,
          hasParticipantName: !!data.participantName,
          hasSessionId: !!data.sessionId,
          hasParticipant: !!data.participant,
          hasParticipantId: !!data.participantId,
          hasRole: !!data.role,
          availableKeys: Object.keys(data),
        });

        return socket.emit("error", {
          message: "Format de donn√©es non reconnu",
          code: "INVALID_DATA_FORMAT",
          expected:
            "{ sessionCode, participantName, isAnonymous } OU { sessionId, participant: { name } } OU { sessionId, participantId, role }",
          received: Object.keys(data),
          data: data,
        });
      }

      console.log(`üìä Donn√©es extraites:`, {
        sessionCode,
        participantName,
        isAnonymous: Boolean(isAnonymous),
        participantId: participantId || "nouveau",
      });

      // Validation des champs extraits
      if (
        !sessionCode ||
        typeof sessionCode !== "string" ||
        sessionCode.trim().length === 0
      ) {
        console.log(`‚ùå sessionCode invalide apr√®s extraction:`, sessionCode);
        return socket.emit("error", {
          message: "Code de session requis",
          code: "MISSING_SESSION_CODE",
          extracted: { sessionCode, participantName, isAnonymous },
        });
      }

      if (
        !participantName ||
        typeof participantName !== "string" ||
        participantName.trim().length === 0
      ) {
        console.log(
          `‚ùå participantName invalide apr√®s extraction:`,
          participantName
        );
        return socket.emit("error", {
          message: "Nom de participant requis",
          code: "MISSING_PARTICIPANT_NAME",
          extracted: { sessionCode, participantName, isAnonymous },
        });
      }

      const cleanSessionCode = sessionCode.trim().toUpperCase();
      const cleanParticipantName = participantName.trim();

      console.log(`üßπ Donn√©es nettoy√©es:`, {
        cleanSessionCode,
        cleanParticipantName,
        isAnonymous: Boolean(isAnonymous),
        isReconnection: !!participantId,
      });

      // Recherche de la session compl√®te
      console.log(`üîç Recherche session avec code: "${cleanSessionCode}"`);

      const session = await Session.findOne({
        where: {
          code: cleanSessionCode,
          status: ["waiting", "active"],
        },
        include: [
          {
            model: Quiz,
            as: "quiz",
            attributes: ["id", "title", "questions"],
          },
          {
            model: User,
            as: "host",
            attributes: ["id", "username", "firstName", "lastName"],
          },
        ],
      });

      if (!session) {
        console.log(
          `‚ùå Session non trouv√©e pour le code: "${cleanSessionCode}"`
        );
        return socket.emit("error", {
          message: "Session non trouv√©e ou termin√©e",
          code: "SESSION_NOT_FOUND",
          searchedCode: cleanSessionCode,
        });
      }

      console.log(`‚úÖ Session trouv√©e:`, {
        id: session.id,
        code: session.code,
        title: session.title,
        status: session.status,
        participantsType: typeof session.participants,
        isArray: Array.isArray(session.participants),
      });

      // S'assurer que participants est un tableau
      let currentParticipants = session.participants;
      if (typeof currentParticipants === "string") {
        currentParticipants = JSON.parse(currentParticipants);
      }
      if (!Array.isArray(currentParticipants)) {
        console.log(`‚ö†Ô∏è Participants n'est pas un tableau, initialisation`);
        currentParticipants = [];
      }

      console.log(
        `‚úÖ Participants array valid√©: ${currentParticipants.length} participants`
      );

      // Gestion reconnexion vs nouveau participant
      let finalParticipantId = participantId;
      let isReconnection = false;

      if (participantId) {
        // C'est une reconnexion - v√©rifier que le participant existe
        const existingParticipant = currentParticipants.find(
          (p) => p && p.id === participantId
        );
        if (existingParticipant) {
          isReconnection = true;
          console.log(
            `üîÑ Reconnexion du participant: ${existingParticipant.name}`
          );

          // Mettre √† jour le statut de connexion
          const updatedParticipants = currentParticipants.map((p) => {
            if (p.id === participantId) {
              return {
                ...p,
                isConnected: true,
                socketId: socket.id,
                lastSeen: new Date().toISOString(),
              };
            }
            return p;
          });

          await session.update({ participants: updatedParticipants });
          currentParticipants = updatedParticipants;
        } else {
          console.log(
            `‚ö†Ô∏è Participant ${participantId} non trouv√©, cr√©ation d'un nouveau`
          );
          finalParticipantId = null; // Forcer la cr√©ation d'un nouveau
        }
      }

      if (!isReconnection) {
        // Nouveau participant - v√©rifications habituelles
        const maxParticipants = session.settings?.maxParticipants || 100;
        if (currentParticipants.length >= maxParticipants) {
          console.log(
            `‚ùå Session pleine: ${currentParticipants.length}/${maxParticipants}`
          );
          return socket.emit("error", {
            message: "Session compl√®te",
            code: "SESSION_FULL",
            current: currentParticipants.length,
            max: maxParticipants,
          });
        }

        // V√©rification du nom unique
        const existingParticipant = currentParticipants.find(
          (p) =>
            p &&
            p.name &&
            p.name.toLowerCase() === cleanParticipantName.toLowerCase()
        );

        if (existingParticipant) {
          console.log(`‚ùå Nom d√©j√† pris: "${cleanParticipantName}"`);
          return socket.emit("error", {
            message: "Ce nom est d√©j√† pris dans cette session",
            code: "NAME_TAKEN",
            suggestedName: `${cleanParticipantName}_${Date.now()
              .toString()
              .slice(-4)}`,
          });
        }

        // Cr√©ation du nouveau participant
        finalParticipantId = `participant_${Date.now()}_${Math.random()
          .toString(36)
          .substr(2, 9)}`;

        const newParticipant = {
          id: finalParticipantId,
          name: cleanParticipantName,
          socketId: socket.id,
          userId: socket.user?.id || null,
          isAnonymous: Boolean(isAnonymous),
          joinedAt: new Date().toISOString(),
          isConnected: true,
          score: 0,
          responses: {},
          stats: {
            correctAnswers: 0,
            totalAnswers: 0,
            averageTime: 0,
          },
        };

        // Ajouter le participant
        const updatedParticipants = [...currentParticipants, newParticipant];
        await session.update({ participants: updatedParticipants });
        currentParticipants = updatedParticipants;

        console.log(`‚ûï Nouveau participant cr√©√©: ${finalParticipantId}`);
      }

      // Configuration du socket
      socket.sessionId = session.id;
      socket.participantId = finalParticipantId;
      socket.isParticipant = true;
      socket.join(`session_${session.id}`);

      // R√©ponse au participant
      const responseData = {
        sessionId: session.id,
        participantId: finalParticipantId,
        session: {
          id: session.id,
          code: session.code,
          title: session.title,
          status: session.status,
          currentQuestionIndex: session.currentQuestionIndex || -1,
          participantCount: currentParticipants.length,
          maxParticipants: session.settings?.maxParticipants || 100,
          host: session.host
            ? {
                name: session.host.firstName || session.host.username,
                username: session.host.username,
              }
            : null,
        },
        participant: {
          id: finalParticipantId,
          name: cleanParticipantName,
          isAnonymous: Boolean(isAnonymous),
          joinedAt: new Date().toISOString(),
        },
        quiz: session.quiz
          ? {
              id: session.quiz.id,
              title: session.quiz.title,
              questionCount: session.quiz.questions?.length || 0,
            }
          : null,
        isReconnection: isReconnection,
      };

      console.log(`üì§ Envoi session_joined au participant`);
      socket.emit("session_joined", responseData);

      // Notifications aux autres participants et √† l'h√¥te
      if (!isReconnection) {
        const hostNotification = {
          participantId: finalParticipantId,
          participantName: cleanParticipantName,
          totalParticipants: currentParticipants.length,
          participant: {
            id: finalParticipantId,
            name: cleanParticipantName,
            joinedAt: new Date().toISOString(),
            isConnected: true,
            score: 0,
          },
        };

        console.log(`üì¢ Notification √† l'h√¥te: host_${session.id}`);
        io.to(`host_${session.id}`).emit(
          "participant_joined",
          hostNotification
        );
        socket
          .to(`session_${session.id}`)
          .emit("participant_joined", hostNotification);
      } else {
        // Notification de reconnexion
        const reconnectionNotification = {
          participantId: finalParticipantId,
          participantName: cleanParticipantName,
          totalParticipants: currentParticipants.length,
          isReconnection: true,
        };

        console.log(`üîÑ Notification reconnexion √† l'h√¥te`);
        io.to(`host_${session.id}`).emit(
          "participant_reconnected",
          reconnectionNotification
        );
      }

      console.log(`‚úÖ === FIN handleJoinSession SUCCESS ===`);
      console.log(
        `   ${
          isReconnection ? "Reconnexion" : "Nouveau participant"
        }: "${cleanParticipantName}"`
      );
      console.log(`   Total participants: ${currentParticipants.length}\n`);
    } catch (error) {
      console.error(`üí• === ERREUR handleJoinSession ===`);
      console.error(`   Socket ID: ${socket.id}`);
      console.error(`   Error:`, error.message);
      console.error(`   Stack:`, error.stack);

      socket.emit("error", {
        message: "Erreur lors de la connexion √† la session",
        code: "JOIN_SESSION_ERROR",
        details:
          process.env.NODE_ENV === "development" ? error.message : undefined,
      });
    }
  }

  // Handler: Quitter la session (SIMPLIFI√â)
  async function handleLeaveSession() {
    const socket = this;
    console.log(`üëã Leave session demand√© par ${socket.id}`);

    if (!socket.sessionId || !socket.participantId) {
      console.log(`   Pas de session/participant √† quitter`);
      return;
    }

    try {
      const session = await Session.findByPk(socket.sessionId);
      if (session && Array.isArray(session.participants)) {
        const updatedParticipants = session.participants.filter(
          (p) => p.id !== socket.participantId
        );

        await session.update({ participants: updatedParticipants });

        // Notifier l'h√¥te
        io.to(`host_${socket.sessionId}`).emit("participant_left", {
          participantId: socket.participantId,
          totalParticipants: updatedParticipants.length,
        });

        console.log(
          `‚úÖ Participant ${socket.participantId} retir√© de la session`
        );
      }

      // Nettoyer le socket
      socket.leave(`session_${socket.sessionId}`);
      socket.sessionId = null;
      socket.participantId = null;
      socket.isParticipant = false;

      socket.emit("session_left");
    } catch (error) {
      console.error("Erreur lors de la sortie de session:", error);
    }
  }

  // Handler: Connexion h√¥te (SIMPLIFI√â)
  async function handleHostSession(data) {
    const socket = this;

    try {
      console.log(
        `üéØ Host session demand√© par ${socket.user?.username} pour session ${data?.sessionId}`
      );

      if (!socket.user) {
        return socket.emit("error", {
          message: "Authentification requise pour √™tre h√¥te",
          code: "AUTH_REQUIRED",
        });
      }

      if (!data?.sessionId) {
        return socket.emit("error", {
          message: "ID de session requis",
          code: "MISSING_SESSION_ID",
        });
      }

      const session = await Session.findByPk(data.sessionId, {
        include: [
          { model: Quiz, as: "quiz" },
          { model: User, as: "host" },
        ],
      });

      if (!session) {
        return socket.emit("error", {
          message: "Session non trouv√©e",
          code: "SESSION_NOT_FOUND",
        });
      }

      // V√©rifier les permissions
      const isHost = session.hostId === socket.user.id;
      const isQuizOwner = session.quiz?.creatorId === socket.user.id;
      const isAdmin = socket.user.role === "admin";

      if (!isHost && !isQuizOwner && !isAdmin) {
        return socket.emit("error", {
          message: "Permission insuffisante",
          code: "INSUFFICIENT_PERMISSIONS",
        });
      }

      // Configurer le socket h√¥te
      socket.sessionId = session.id;
      socket.isHost = true;
      socket.join(`host_${session.id}`);
      socket.join(`session_${session.id}`);

      // Confirmer √† l'h√¥te avec toutes les donn√©es
      socket.emit("host_connected", {
        sessionId: session.id,
        session: {
          id: session.id,
          code: session.code,
          title: session.title,
          status: session.status,
          currentQuestionIndex: session.currentQuestionIndex || 0,
          participants: session.participants || [],
          responses: session.responses || {},
          settings: session.settings || {},
          stats: session.stats || {},
          quiz: session.quiz
            ? {
                id: session.quiz.id,
                title: session.quiz.title,
                questions: session.quiz.questions || [],
              }
            : null,
        },
      });

      console.log(
        `‚úÖ H√¥te ${socket.user.username} connect√© √† la session ${session.code}`
      );
    } catch (error) {
      console.error("Erreur connexion h√¥te:", error);
      socket.emit("error", {
        message: "Erreur lors de la connexion h√¥te",
        code: "HOST_CONNECTION_ERROR",
      });
    }
  }

  async function handlePreviousQuestion() {
    const socket = this;
    if (!socket.isHost || !socket.sessionId) {
      return socket.emit("error", { message: "Permission insuffisante" });
    }

    try {
      const session = await Session.findByPk(socket.sessionId, {
        include: [{ model: Quiz, as: "quiz" }],
      });

      if (!session) {
        return socket.emit("error", { message: "Session non trouv√©e" });
      }

      const currentIndex = session.currentQuestionIndex || 0;
      if (currentIndex <= 0) {
        return socket.emit("error", { message: "Premi√®re question atteinte" });
      }

      const newIndex = currentIndex - 1;
      await session.update({
        currentQuestionIndex: newIndex,
        currentQuestionStartedAt: new Date(),
      });

      io.to(`session_${session.id}`).emit("previous_question", {
        sessionId: session.id,
        questionIndex: newIndex,
        question: session.quiz.questions[newIndex],
        startedAt: new Date(),
      });
    } catch (error) {
      console.error("Erreur question pr√©c√©dente:", error);
      socket.emit("error", {
        message: "Erreur lors du retour √† la question pr√©c√©dente",
      });
    }
  }

  // Handler: Soumettre r√©ponse (simplifi√©)
  async function handleSubmitResponse(data) {
    const socket = this;
    
    console.log(`üöÄ === D√âBUT handleSubmitResponse ===`);
    console.log(`   Socket ID: ${socket.id}`);
    console.log(`   Participant ID: ${socket.participantId}`);
    console.log(`   Data re√ßue:`, data);
    
    if (!socket.participantId || !socket.sessionId) {
      const error = {
        message: "Participant ou session non identifi√©",
        code: "UNAUTHORIZED"
      };
      console.log(`‚ùå Non autoris√©:`, error);
      return socket.emit("error", error);
    }
    
    const { questionId, answer, timeSpent } = data;
    
    if (!questionId || answer === undefined || answer === null) {
      const error = {
        message: "Donn√©es manquantes (questionId, answer requis)",
        code: "MISSING_DATA"
      };
      console.log(`‚ùå Donn√©es manquantes:`, error);
      return socket.emit("error", error);
    }
    
    try {
      // R√©cup√©rer la session avec le quiz
      const session = await Session.findByPk(socket.sessionId, {
        include: [{ model: Quiz, as: "quiz" }],
      });
      
      if (!session) {
        const error = {
          message: "Session non trouv√©e",
          code: "SESSION_NOT_FOUND"
        };
        console.log(`‚ùå Session non trouv√©e:`, error);
        return socket.emit("error", error);
      }
      
      // V√©rifier que la session est active
      if (session.status !== "active") {
        const error = {
          message: "La session n'est pas active",
          code: "SESSION_NOT_ACTIVE",
          currentStatus: session.status
        };
        console.log(`‚ùå Session non active:`, error);
        return socket.emit("error", error);
      }
      
      const questions = session.quiz?.questions || [];
      const questionIndex = session.currentQuestionIndex || 0;
      
      if (questionIndex >= questions.length) {
        const error = {
          message: "Index de question invalide",
          code: "INVALID_QUESTION_INDEX",
          questionIndex,
          totalQuestions: questions.length
        };
        console.log(`‚ùå Index question invalide:`, error);
        return socket.emit("error", error);
      }
      
      const question = questions[questionIndex];
      const actualQuestionId = `q_${questionIndex}`;
      
      console.log(`‚úÖ Question trouv√©e √† l'index ${questionIndex}:`);
      console.log(`   Question: "${question.question}"`);
      console.log(`   Type: ${question.type}`);
      console.log(`   ID g√©n√©r√©: ${actualQuestionId}`);
      console.log(`   Options:`, question.options);
      console.log(`   R√©ponse correcte:`, question.correctAnswer);
      
      // V√©rifier correspondance questionId
      if (questionId !== actualQuestionId && questionId !== questionIndex.toString() && questionId !== questionIndex) {
        const error = {
          message: "Question ID ne correspond pas √† la question courante",
          code: "QUESTION_MISMATCH",
          receivedQuestionId: questionId,
          expectedQuestionId: actualQuestionId,
          currentQuestionIndex: questionIndex
        };
        console.log(`‚ùå Question ID mismatch:`, error);
        return socket.emit("error", error);
      }
      
      // V√©rifier si le participant a d√©j√† r√©pondu (STRUCTURE TABLEAU)
      const responses = session.responses || {};
      console.log(`üîç V√©rification des r√©ponses existantes pour question ${actualQuestionId}...`);
      console.log(`   Structure responses:`, typeof responses, Object.keys(responses));
      
      // Initialiser le tableau pour cette question si n√©cessaire
      if (!Array.isArray(responses[actualQuestionId])) {
        responses[actualQuestionId] = [];
        console.log(`üìã Initialisation tableau r√©ponses pour ${actualQuestionId}`);
      }
      
      // V√©rifier si le participant a d√©j√† r√©pondu (dans le tableau)
      const existingResponse = responses[actualQuestionId].find(
        (r) => r.participantId === socket.participantId
      );
      
      if (existingResponse) {
        const error = {
          message: "Vous avez d√©j√† r√©pondu √† cette question",
          code: "ALREADY_ANSWERED"
        };
        console.log(`‚ùå D√©j√† r√©pondu:`, error);
        return socket.emit("error", error);
      }
      
      // CORRECTION PRINCIPALE: Calculer le score avec logique am√©lior√©e
      console.log(`üßÆ Calcul du score am√©lior√©...`);
    let isCorrect = false;
    let points = 0;
    
    console.log(`   R√©ponse re√ßue: "${answer}" (type: ${typeof answer})`);
    
    // if (question.type === "qcm") {
    //   console.log(`   Type QCM - Options:`, question.options);
      
    //   // Cas 1: R√©ponse correcte d√©finie directement
    //   if (question.correctAnswer !== undefined && question.correctAnswer !== null) {
    //     // Comparaison directe avec la r√©ponse correcte
    //     isCorrect = String(question.correctAnswer) === String(answer);
    //     console.log(`   Comparaison directe: ${question.correctAnswer} === ${answer} => ${isCorrect}`);
    //   }
    //   // Cas 2: Options avec flag isCorrect (CAS PRINCIPAL)
    //   else if (Array.isArray(question.options)) {
    //     const correctOptions = question.options.filter(opt => opt.isCorrect === true);
    //     console.log(`   Options correctes trouv√©es:`, correctOptions.length);
        
    //     if (correctOptions.length > 0) {
    //       // CORRECTION PRINCIPALE: G√©rer les diff√©rents formats de r√©ponse
    //       const answerIndex = parseInt(answer); // Si answer est un index
    //       const answerText = String(answer); // Si answer est du texte
          
    //       console.log(`   Answer index: ${answerIndex}, Answer text: "${answerText}"`);
          
    //       // V√©rifier si la r√©ponse correspond √† une option correcte
    //       isCorrect = correctOptions.some((opt, correctIndex) => {
    //         const optionIndex = question.options.indexOf(opt);
    //         console.log(`   Checking option "${opt.text}" at index ${optionIndex}`);
            
    //         const matches = (
    //           // Comparaison par index (answer = 0, 1, 2, 3...)
    //           optionIndex === answerIndex ||
    //           // Comparaison par texte
    //           opt.text === answerText ||
    //           opt.text.toLowerCase().trim() === answerText.toLowerCase().trim() ||
    //           // Comparaison par ID si pr√©sent
    //           opt.id === answer ||
    //           String(opt.id) === answerText
    //         );
            
    //         if (matches) {
    //           console.log(`   ‚úÖ Match trouv√© avec option: "${opt.text}" √† l'index ${optionIndex}`);
    //         }
    //         return matches;
    //       });
          
    //       console.log(`   R√©sultat final QCM: ${isCorrect}`);
    //     }
    //   }
      
    //   // FALLBACK: Si pas de correctAnswer et pas d'options avec isCorrect
    //   if (!isCorrect && question.options && !question.correctAnswer) {
    //     console.log(`   ‚ö†Ô∏è FALLBACK: Tentative de d√©tection automatique de la bonne r√©ponse`);
    //     // Dans ce cas, on ne peut pas d√©terminer la bonne r√©ponse
    //     // Il faudrait que le quiz soit configur√© correctement
    //   }
    // } 
    if (question.type === "qcm") {
      console.log(`   Type QCM - Options:`, question.options);
      const correctOptions = question.options?.filter(opt => opt.isCorrect) || [];
      
      if (correctOptions.length === 0 && question.correctAnswer !== undefined) {
        isCorrect = String(question.correctAnswer) === String(answer);
      } else if (Array.isArray(question.options)) {
        const answerIndex = parseInt(answer);
        
        // CORRECTION: V√©rifier si answer est un index valide
        if (!isNaN(answerIndex) && answerIndex >= 0 && answerIndex < question.options.length) {
          // R√©ponse par index
          isCorrect = question.options[answerIndex].isCorrect === true;
          console.log(`   R√©ponse par index ${answerIndex}: ${question.options[answerIndex].text} ‚Üí ${isCorrect}`);
        } else {
          // R√©ponse par texte ou ID
          isCorrect = correctOptions.some(opt => 
            opt.text === answer || 
            opt.id === answer ||
            opt.text.toLowerCase().trim() === String(answer).toLowerCase().trim()
          );
          console.log(`   R√©ponse par texte/ID: ${answer} ‚Üí ${isCorrect}`);
        }
      }
    }
    else if (question.type === "vrai_faux" || question.type === "vraifaux") {
      console.log(`   Type Vrai/Faux - R√©ponse correcte: ${question.correctAnswer}`);
      console.log(`   R√©ponse re√ßue: ${answer} (type: ${typeof answer})`);
      
      // CORRECTION: G√©rer tous les formats possibles
      let normalizedAnswer;
      let normalizedCorrect;
      
      // 1. Si la r√©ponse est un index (0 = Vrai, 1 = Faux)
      if (typeof answer === 'number' || !isNaN(parseInt(answer))) {
        const answerIndex = parseInt(answer);
        normalizedAnswer = answerIndex === 0 ? "vrai" : "faux";
        console.log(`   R√©ponse par index ${answerIndex} ‚Üí "${normalizedAnswer}"`);
      } else {
        // 2. Si la r√©ponse est du texte
        normalizedAnswer = String(answer).toLowerCase().trim();
        console.log(`   R√©ponse par texte ‚Üí "${normalizedAnswer}"`);
      }
      
      // Normaliser la r√©ponse correcte
      if (typeof question.correctAnswer === 'boolean') {
        normalizedCorrect = question.correctAnswer ? "vrai" : "faux";
      } else if (typeof question.correctAnswer === 'number') {
        normalizedCorrect = question.correctAnswer === 0 ? "vrai" : "faux";
      } else {
        normalizedCorrect = String(question.correctAnswer).toLowerCase().trim();
      }
      
      console.log(`   R√©ponse correcte normalis√©e ‚Üí "${normalizedCorrect}"`);
      
      // 3. Comparaison avec toutes les variantes possibles
      isCorrect = (
        normalizedAnswer === normalizedCorrect ||
        // Variantes en fran√ßais
        (normalizedAnswer === "vrai" && ["true", "vrai", "1", "0"].includes(normalizedCorrect)) ||
        (normalizedAnswer === "faux" && ["false", "faux", "0", "1"].includes(normalizedCorrect)) ||
        // Variantes en anglais
        (normalizedAnswer === "true" && ["true", "vrai", "1", "0"].includes(normalizedCorrect)) ||
        (normalizedAnswer === "false" && ["false", "faux", "0", "1"].includes(normalizedCorrect)) ||
        // Gestion sp√©ciale selon la logique du quiz
        (normalizedAnswer === "vrai" && normalizedCorrect === "0") ||  // 0 = Vrai
        (normalizedAnswer === "faux" && normalizedCorrect === "1")     // 1 = Faux
      );
      
      console.log(`   R√©sultat comparaison: "${normalizedAnswer}" vs "${normalizedCorrect}" ‚Üí ${isCorrect}`);
    }
    else if (question.type === "reponse_libre" || question.type === "text") {
      console.log(`   Type R√©ponse libre - R√©ponse correcte: "${question.correctAnswer}"`);
      if (question.correctAnswer) {
        // Comparaison flexible pour les r√©ponses libres
        const userAnswer = String(answer).toLowerCase().trim();
        const correctAnswer = String(question.correctAnswer).toLowerCase().trim();
        
        // Comparaison exacte ou partielle selon les param√®tres de la question
        if (question.exactMatch === false || question.partialMatch === true) {
          isCorrect = correctAnswer.includes(userAnswer) || userAnswer.includes(correctAnswer);
        } else {
          isCorrect = userAnswer === correctAnswer;
        }
        
        console.log(`   Comparaison flexible: "${userAnswer}" vs "${correctAnswer}" => ${isCorrect}`);
      }
    }
    
    points = isCorrect ? (question.points || 1) : 0;
    
    console.log(`   üéØ R√©sultat final: ${isCorrect ? 'CORRECT' : 'INCORRECT'} (${points} points)`);

    console.log(`üíæ Utilisation de session.addResponse()...`);
      
    const responseDataForModel = {
      questionId: actualQuestionId,
      participantId: socket.participantId,
      answer,
      timeSpent: timeSpent || 0,
      points,
      isCorrect,
      submittedAt: new Date(),
    };
    
    console.log(`üìù Donn√©es pour addResponse:`, responseDataForModel);
    
    try {
      // Cette m√©thode va :
      // 1. Ajouter la r√©ponse au tableau responses
      // 2. Mettre √† jour les stats du participant 
      // 3. Recalculer les stats de session
      // 4. Sauvegarder en base de donn√©es
      await session.addResponse(responseDataForModel);
      
      console.log(`‚úÖ session.addResponse() termin√© avec succ√®s`);
      
      // Recharger la session pour avoir les donn√©es √† jour
      await session.reload();
      
    } catch (addResponseError) {
      console.error(`‚ùå Erreur dans session.addResponse():`, addResponseError.message);
      
      // Fallback : sauvegarde manuelle comme avant
      console.log(`üîÑ Fallback - sauvegarde manuelle...`);
      
      const responses = session.responses || {};
      if (!Array.isArray(responses[actualQuestionId])) {
        responses[actualQuestionId] = [];
      }
      responses[actualQuestionId].push({
        participantId: socket.participantId,
        answer,
        timeSpent: timeSpent || 0,
        points,
        isCorrect,
        submittedAt: new Date(),
      });
      
      const participants = Array.isArray(session.participants) ? session.participants : [];
      const participantIndex = participants.findIndex(p => p.id === socket.participantId);
      
      if (participantIndex !== -1) {
        participants[participantIndex].score = (participants[participantIndex].score || 0) + points;
        participants[participantIndex].totalQuestions = (participants[participantIndex].totalQuestions || 0) + 1;
        participants[participantIndex].correctAnswers = (participants[participantIndex].correctAnswers || 0) + (isCorrect ? 1 : 0);
      }
      
      const updatedStats = calculateSessionStats({ participants, responses });
      await session.update({ participants, responses, stats: updatedStats });
    }
    
    // R√©cup√©rer les participants mis √† jour
    const participants = Array.isArray(session.participants) ? session.participants : [];
    const participantIndex = participants.findIndex(p => p.id === socket.participantId);
    const updatedParticipant = participantIndex !== -1 ? participants[participantIndex] : null;
      
      console.log(`‚úÖ Session mise √† jour avec succ√®s`);
      
      // ‚úÖ CONFIRMATION AVEC DONN√âES MISES √Ä JOUR
      const confirmationData = {
        success: true,
        questionId: actualQuestionId,
        answer,
        points,
        isCorrect,
        totalScore: updatedParticipant?.score || 0,
        correctAnswers: updatedParticipant?.correctAnswers || 0,
        totalQuestions: updatedParticipant?.totalQuestions || 0,
        message: isCorrect ? "Bonne r√©ponse !" : "R√©ponse incorrecte"
      };
      
      console.log(`üì§ Envoi de confirmation avec stats mises √† jour:`, confirmationData);
      socket.emit("response_submitted", confirmationData);
      
      // Notifier l'h√¥te avec les stats mises √† jour
      const currentResponses = session.responses || {};
      const currentQuestionResponses = currentResponses[actualQuestionId] || [];
      
      const hostNotification = {
        participantId: socket.participantId,
        participantName: updatedParticipant?.name || "Participant",
        questionId: actualQuestionId,
        answer,
        points,
        isCorrect,
        timeSpent,
        totalResponses: currentQuestionResponses.length,
        sessionStats: session.stats || {},
        participantStats: {
          score: updatedParticipant?.score || 0,
          correctAnswers: updatedParticipant?.correctAnswers || 0,
          totalQuestions: updatedParticipant?.totalQuestions || 0,
        }
      };
      
      console.log(`üì§ Notification √† l'h√¥te avec stats compl√®tes:`, hostNotification);
      io.to(`host_${session.id}`).emit("new_response", hostNotification);
      
      console.log(`‚úÖ === FIN handleSubmitResponse SUCCESS ===\n`);
      
    } catch (error) {
      console.error(`üí• === ERREUR handleSubmitResponse ===`);
      console.error(`   Socket ID: ${socket.id}`);
      console.error(`   Participant ID: ${socket.participantId}`);
      console.error(`   Error name: ${error.name}`);
      console.error(`   Error message: ${error.message}`);
      console.error(`   Stack:`, error.stack);
      
      const errorResponse = {
        message: "Erreur lors de la soumission",
        code: "SUBMISSION_ERROR",
        details: process.env.NODE_ENV === "development" ? error.message : "Erreur serveur"
      };
      
      console.log(`üì§ Envoi erreur:`, errorResponse);
      socket.emit("error", errorResponse);
      
      console.log(`‚ùå === FIN handleSubmitResponse ERROR ===\n`);
    }
  }

  // Handlers simples
  async function handleParticipantReady() {
    const socket = this;
    if (!socket.isParticipant || !socket.sessionId) return;

    io.to(`host_${socket.sessionId}`).emit("participant_ready", {
      participantId: socket.participantId,
    });
  }

  async function handleParticipantHeartbeat() {
    const socket = this;
    if (!socket.isParticipant || !socket.sessionId) return;

    try {
      const session = await Session.findByPk(socket.sessionId);
      if (session && Array.isArray(session.participants)) {
        const participants = session.participants.map((p) => {
          if (p.id === socket.participantId) {
            return { ...p, isConnected: true, lastSeen: new Date() };
          }
          return p;
        });

        await session.update({ participants });
      }
    } catch (error) {
      console.error("Erreur heartbeat:", error);
    }
  }

  async function handleSendMessage(data) {
    const socket = this;
    if (!socket.sessionId || !data?.message?.trim()) return;

    const chatMessage = {
      id: Date.now(),
      participantId: socket.participantId || null,
      participantName:
        socket.user?.username || socket.participantName || "Anonyme",
      message: data.message.trim(),
      timestamp: new Date(),
      isHost: socket.isHost || false,
    };

    io.to(`session_${socket.sessionId}`).emit("new_message", chatMessage);
  }

  // Handler: D√©connexion avec nettoyage complet
  async function handleDisconnect(reason) {
    const socket = this;
    console.log(`üîå D√©connexion: ${socket.id} - Raison: ${reason}`);

    if (socket.sessionId && socket.isParticipant && socket.participantId) {
      try {
        const session = await Session.findByPk(socket.sessionId);
        if (session && Array.isArray(session.participants)) {
          const updatedParticipants = session.participants.map((p) => {
            if (p.id === socket.participantId) {
              return { ...p, isConnected: false, lastSeen: new Date() };
            }
            return p;
          });

          await session.update({ participants: updatedParticipants });

          // Notifier l'h√¥te
          io.to(`host_${socket.sessionId}`).emit("participant_disconnected", {
            participantId: socket.participantId,
            totalConnected: updatedParticipants.filter((p) => p.isConnected)
              .length,
          });
        }
      } catch (error) {
        console.error("Erreur lors de la d√©connexion:", error);
      }
    }
  }

  const handleJoinSessionSocket = (socket, data) => {
    const { sessionId, participantId, participantName } = data;
  
    console.log("üîå Connexion Socket participant:", data);
  
    if (!sessionId || !participantId) {
      socket.emit("error", {
        message: "Donn√©es de session manquantes",
        code: "MISSING_SESSION_DATA",
      });
      return;
    }
  
    // Rejoindre la room de la session
    socket.join(`session_${sessionId}`);
  
    // Stocker les infos dans le socket
    socket.sessionId = sessionId;
    socket.participantId = participantId;
    socket.participantName = participantName;
    socket.role = "participant";
  
    // Confirmer la connexion
    socket.emit("session_socket_connected", {
      sessionId,
      participantId,
      participantName,
      socketId: socket.id,
    });
  
    // Notifier les autres participants et l'h√¥te
    socket.to(`session_${sessionId}`).emit("participant_socket_connected", {
      sessionId,
      participantId,
      participantName,
      socketId: socket.id,
    });
  
    console.log(
      `‚úÖ Participant ${participantName} connect√© √† la session ${sessionId}`
    );
  };
  
  
  async function handleStartSession() {
    const socket = this;
    console.log(`\nüöÄ === D√âMARRAGE SESSION ===`);
    console.log(`   Socket ID: ${socket.id}`);
    console.log(`   Is Host: ${socket.isHost}`);
    console.log(`   Session ID: ${socket.sessionId}`);
    
    if (!socket.isHost || !socket.sessionId) {
      console.log(`‚ùå Permission insuffisante pour d√©marrage`);
      return socket.emit("error", { message: "Permission insuffisante" });
    }
  
    try {
      const session = await Session.findByPk(socket.sessionId, {
        include: [{ model: Quiz, as: "quiz" }],
      });
  
      if (!session || session.status !== "waiting") {
        console.log(`‚ùå Impossible de d√©marrer: session ${session?.status || 'non trouv√©e'}`);
        return socket.emit("error", {
          message: "Impossible de d√©marrer cette session",
        });
      }
  
      const participants = Array.isArray(session.participants)
        ? session.participants
        : [];
  
      if (participants.length === 0) {
        console.log(`‚ùå Aucun participant pour d√©marrer`);
        return socket.emit("error", {
          message: "Au moins un participant est requis",
        });
      }
  
      console.log(`üìã D√©marrage session ${session.code}:`);
      console.log(`   Participants: ${participants.length}`);
      console.log(`   Questions: ${session.quiz?.questions?.length || 0}`);
  
      await session.update({
        status: "active",
        startedAt: new Date(),
        currentQuestionIndex: 0,
        currentQuestionStartedAt: new Date(),
      });
  
      // D√âMARRER LE TIMER POUR LA PREMI√àRE QUESTION
      const firstQuestion = session.quiz?.questions?.[0];
      console.log(`üîç Premi√®re question:`, {
        exists: !!firstQuestion,
        question: firstQuestion?.question?.substring(0, 50),
        timeLimit: firstQuestion?.timeLimit,
        type: firstQuestion?.type
      });
  
      if (firstQuestion && firstQuestion.timeLimit) {
        console.log(`‚è∞ === CONFIGURATION TIMER PREMI√àRE QUESTION ===`);
        console.log(`   Question: "${firstQuestion.question?.substring(0, 50)}..."`);
        console.log(`   Dur√©e: ${firstQuestion.timeLimit}s`);
        
        startQuestionTimer(session.id, 0, firstQuestion.timeLimit);
      } else {
        console.log(`‚è∞ Pas de timer pour la premi√®re question`);
        debugTimer(session.id, "NO_TIMER_FIRST_QUESTION", {
          hasQuestion: !!firstQuestion,
          timeLimit: firstQuestion?.timeLimit
        });
      }
  
      // Notifier tous les participants
      io.to(`session_${session.id}`).emit("session_started", {
        sessionId: session.id,
        currentQuestionIndex: 0,
        startedAt: new Date(),
      });
  
      console.log(`‚úÖ Session ${session.code} d√©marr√©e avec succ√®s`);
      console.log(`   Timer actif: ${activeQuestionTimers.has(session.id)}`);
      console.log(`=== FIN D√âMARRAGE SESSION ===\n`);
      
    } catch (error) {
      console.error(`üí• Erreur lors du d√©marrage:`, error);
      debugTimer(socket.sessionId, "START_SESSION_ERROR", { error: error.message });
      socket.emit("error", { message: "Erreur lors du d√©marrage" });
    }
  }
  
  function debugAllTimers() {
    console.log(`\nüìä === √âTAT DES TIMERS ===`);
    console.log(`   Timers actifs: ${activeQuestionTimers.size}`);
    
    for (const [sessionId, timerId] of activeQuestionTimers.entries()) {
      console.log(`   - Session ${sessionId}: Timer ${timerId}`);
      
      if (timerDebugInfo.has(sessionId)) {
        const history = timerDebugInfo.get(sessionId).slice(-3); // 3 derni√®res actions
        console.log(`     Historique:`, history.map(h => `${h.action}(${h.timestamp})`).join(', '));
      }
    }
    console.log(`=== FIN √âTAT TIMERS ===\n`);
  }

  global.debugAllTimers = debugAllTimers;
  global.debugTimer = debugTimer;
  global.activeQuestionTimers = activeQuestionTimers;

  // Appeler le debug toutes les 30 secondes en mode d√©veloppement
if (process.env.NODE_ENV === "development") {

  setInterval(debugAllTimers, 30000);
}
};


// Nettoyage des timers √† la d√©connexion
const originalHandleDisconnect = handleDisconnect;
function handleDisconnect() {
  const socket = this;
  
  // Si c'est l'h√¥te qui se d√©connecte, arr√™ter le timer
  if (socket.isHost && socket.sessionId) {
    stopQuestionTimer(socket.sessionId);
    console.log(`üîå H√¥te d√©connect√©, timer arr√™t√© pour session ${socket.sessionId}`);
  }
  
  // Appeler le handler original
  if (originalHandleDisconnect) {
    originalHandleDisconnect.call(this);
  }
}

module.exports = socketHandlers;

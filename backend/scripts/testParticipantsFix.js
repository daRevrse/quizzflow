const axios = require("axios");

// Configuration
const API_BASE_URL = "http://localhost:3001/api";
const TEST_SESSION_CODE = "JW2CSK"; // Remplacer par un code de session valide

// Instance axios configur√©e
const api = axios.create({
  baseURL: API_BASE_URL,
  headers: {
    "Content-Type": "application/json",
  },
  timeout: 10000,
});

async function testParticipantsFix() {
  console.log("üß™ === TEST CORRECTION PARTICIPANTS VIDES ===\n");

  try {
    // 1. R√©cup√©rer l'√©tat initial de la session
    console.log("1Ô∏è‚É£ R√©cup√©ration √©tat initial...");
    const initialResponse = await api.get(`/session/code/${TEST_SESSION_CODE}`);
    const initialSession = initialResponse.data.session;

    console.log("üìä √âtat initial:", {
      sessionId: initialSession.id,
      sessionCode: initialSession.code,
      title: initialSession.title,
      status: initialSession.status,
      participantCount: initialSession.participantCount,
      canJoin: initialSession.canJoin,
    });

    // 2. Test d'ajout de participant via API
    console.log("\n2Ô∏è‚É£ Test ajout participant via API...");
    const participantName = `TestUser_${Date.now().toString().slice(-6)}`;

    console.log(`üë§ Tentative d'ajout: "${participantName}"`);

    const joinResponse = await api.post(`/session/${initialSession.id}/join`, {
      participantName: participantName,
      isAnonymous: false,
    });

    console.log("‚úÖ R√©ponse JOIN:", {
      success: joinResponse.data.success,
      participantId: joinResponse.data.participant?.id,
      participantName: joinResponse.data.participant?.name,
      sessionParticipantCount: joinResponse.data.session?.participantCount,
    });

    // 3. V√©rifier l'√©tat apr√®s ajout
    console.log("\n3Ô∏è‚É£ V√©rification apr√®s ajout...");
    const updatedResponse = await api.get(`/session/code/${TEST_SESSION_CODE}`);
    const updatedSession = updatedResponse.data.session;

    console.log("üìä √âtat apr√®s ajout:", {
      participantCount: updatedSession.participantCount,
      diff√©rence:
        updatedSession.participantCount - initialSession.participantCount,
    });

    // 4. Test de r√©cup√©ration des d√©tails de session
    console.log("\n4Ô∏è‚É£ Test r√©cup√©ration d√©tails...");
    try {
      // Simuler un utilisateur connect√© (remplacer par un vrai token si n√©cessaire)
      const detailsResponse = await api.get(`/session/${initialSession.id}`);

      console.log("üìã D√©tails session:", {
        hasParticipants: !!detailsResponse.data.session.participants,
        participantsType: typeof detailsResponse.data.session.participants,
        participantsLength:
          detailsResponse.data.session.participants?.length || 0,
      });

      if (detailsResponse.data.session.participants?.length > 0) {
        console.log("üë• Premier participant:", {
          id: detailsResponse.data.session.participants[0]?.id,
          name: detailsResponse.data.session.participants[0]?.name,
          joinedAt: detailsResponse.data.session.participants[0]?.joinedAt,
        });
      }
    } catch (error) {
      console.log("‚ö†Ô∏è D√©tails n√©cessitent une authentification");
    }

    // 5. Test ajout d'un second participant
    console.log("\n5Ô∏è‚É£ Test second participant...");
    const secondParticipantName = `TestUser2_${Date.now()
      .toString()
      .slice(-6)}`;

    const secondJoinResponse = await api.post(
      `/session/${initialSession.id}/join`,
      {
        participantName: secondParticipantName,
        isAnonymous: true,
      }
    );

    console.log("‚úÖ Second participant ajout√©:", {
      participantId: secondJoinResponse.data.participant?.id,
      sessionParticipantCount:
        secondJoinResponse.data.session?.participantCount,
    });

    // 6. V√©rification finale
    console.log("\n6Ô∏è‚É£ V√©rification finale...");
    const finalResponse = await api.get(`/session/code/${TEST_SESSION_CODE}`);
    const finalSession = finalResponse.data.session;

    console.log("üéØ R√©sultat final:", {
      participantCountInitial: initialSession.participantCount,
      participantCountFinal: finalSession.participantCount,
      participantsAjout√©s:
        finalSession.participantCount - initialSession.participantCount,
      statut:
        finalSession.participantCount > initialSession.participantCount
          ? "‚úÖ SUCCESS"
          : "‚ùå √âCHEC",
    });

    // 7. Test de gestion des erreurs
    console.log("\n7Ô∏è‚É£ Test gestion erreurs...");

    // Test nom dupliqu√©
    try {
      await api.post(`/session/${initialSession.id}/join`, {
        participantName: participantName, // M√™me nom que le premier
        isAnonymous: false,
      });
      console.log("‚ùå Devrait avoir √©chou√© pour nom dupliqu√©");
    } catch (error) {
      if (error.response?.status === 409) {
        console.log("‚úÖ Erreur 409 correcte pour nom dupliqu√©");
      } else {
        console.log("‚ö†Ô∏è Erreur inattendue:", error.response?.status);
      }
    }

    // Test nom trop court
    try {
      await api.post(`/session/${initialSession.id}/join`, {
        participantName: "A", // Trop court
        isAnonymous: false,
      });
      console.log("‚ùå Devrait avoir √©chou√© pour nom trop court");
    } catch (error) {
      if (error.response?.status === 400) {
        console.log("‚úÖ Erreur 400 correcte pour nom trop court");
      } else {
        console.log("‚ö†Ô∏è Erreur inattendue:", error.response?.status);
      }
    }

    console.log("\nüéâ === TEST TERMIN√â ===");
  } catch (error) {
    console.error("\nüí• === ERREUR DANS LE TEST ===");
    console.error("Message:", error.message);

    if (error.response) {
      console.error("Status:", error.response.status);
      console.error("Data:", error.response.data);
    }

    if (error.code === "ECONNREFUSED") {
      console.error(
        "üîå Serveur non accessible. V√©rifiez que l'API est d√©marr√©e."
      );
    }
  }
}

async function debugSpecificSession(sessionId) {
  console.log(`\nüîç === DEBUG SESSION ${sessionId} ===\n`);

  try {
    // R√©cup√©rer par ID
    const response = await api.get(`/session/${sessionId}`);
    const session = response.data.session;

    console.log("üìã Informations session:", {
      id: session.id,
      code: session.code,
      title: session.title,
      status: session.status,
      participantCount: session.participantCount,
      hasParticipants: !!session.participants,
      participantsType: typeof session.participants,
      participantsIsArray: Array.isArray(session.participants),
      participantsLength: session.participants?.length || 0,
    });

    if (session.participants && session.participants.length > 0) {
      console.log("\nüë• Liste des participants:");
      session.participants.forEach((p, index) => {
        console.log(
          `   ${index + 1}. ${p.name} (ID: ${p.id}) - ${
            p.isAnonymous ? "Anonyme" : "Connect√©"
          }`
        );
      });
    } else {
      console.log("\nüë• Aucun participant trouv√©");
    }
  } catch (error) {
    console.error(
      "Erreur debug session:",
      error.response?.data || error.message
    );
  }
}

// Ex√©cution
if (require.main === module) {
  // V√©rifier les arguments de ligne de commande
  const args = process.argv.slice(2);

  if (args[0] === "debug" && args[1]) {
    debugSpecificSession(args[1]);
  } else {
    testParticipantsFix();
  }
}

module.exports = {
  testParticipantsFix,
  debugSpecificSession,
};

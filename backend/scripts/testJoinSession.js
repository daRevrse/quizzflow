// Script de test pour la route join session - backend/scripts/testJoinSession.js

const axios = require("axios");

// Configuration de base
const API_BASE = "http://localhost:3001/api";
const TEST_SESSION_CODE = "JW2CSK"; // Remplacez par un code de session existant

// Helper pour faire des requ√™tes
const api = axios.create({
  baseURL: API_BASE,
  timeout: 5000,
  headers: {
    "Content-Type": "application/json",
  },
});

async function testJoinSessionFlow() {
  console.log("üß™ === TEST JOIN SESSION FLOW ===\n");

  try {
    // 1. V√©rifier qu'une session existe
    console.log("1Ô∏è‚É£ Recherche de session par code...");
    const sessionResponse = await api.get(`/session/code/${TEST_SESSION_CODE}`);

    if (!sessionResponse.data.session) {
      console.error("‚ùå Aucune session trouv√©e avec ce code");
      return;
    }

    const session = sessionResponse.data.session;
    console.log("‚úÖ Session trouv√©e:", {
      id: session.id,
      code: session.code,
      title: session.title,
      status: session.status,
      participantCount: session.participantCount,
      canJoin: session.canJoin,
    });

    if (!session.canJoin) {
      console.error("‚ùå Session ne peut pas accepter de participants");
      return;
    }

    // 2. Test d'ajout de participant
    console.log("\n2Ô∏è‚É£ Test ajout participant...");
    const participantData = {
      participantName: `TestParticipant_${Date.now()}`,
      isAnonymous: true,
    };

    console.log("üì§ Donn√©es envoy√©es:", participantData);

    const joinResponse = await api.post(
      `/session/${session.id}/join`,
      participantData
    );

    console.log("‚úÖ Participant ajout√©:", {
      success: joinResponse.data.success,
      participantId: joinResponse.data.participantId,
      participantName: joinResponse.data.participant?.name,
      sessionParticipantCount: joinResponse.data.session?.participantCount,
    });

    // 3. V√©rifier que le participant a bien √©t√© ajout√©
    console.log("\n3Ô∏è‚É£ V√©rification ajout...");
    const updatedSessionResponse = await api.get(
      `/session/code/${TEST_SESSION_CODE}`
    );
    const updatedSession = updatedSessionResponse.data.session;

    console.log("‚úÖ Session mise √† jour:", {
      participantCount: updatedSession.participantCount,
      diff√©rence: updatedSession.participantCount - session.participantCount,
    });

    if (updatedSession.participantCount > session.participantCount) {
      console.log("üéâ SUCCESS: Le participant a bien √©t√© ajout√© !");
    } else {
      console.log("‚ö†Ô∏è  WARNING: Le nombre de participants n'a pas chang√©");
    }
  } catch (error) {
    console.error("‚ùå Erreur dans le test:", error.message);

    if (error.response) {
      console.error("üìã D√©tails erreur:", {
        status: error.response.status,
        statusText: error.response.statusText,
        data: error.response.data,
      });
    }
  }
}

async function testJoinSessionEdgeCases() {
  console.log("\nüß™ === TEST EDGE CASES ===\n");

  try {
    // Test avec session inexistante
    console.log("1Ô∏è‚É£ Test session inexistante...");
    try {
      await api.post("/session/00000000-0000-0000-0000-000000000000/join", {
        participantName: "Test",
      });
      console.log("‚ùå Devrait avoir √©chou√©");
    } catch (error) {
      if (error.response?.status === 404) {
        console.log("‚úÖ Erreur 404 correcte pour session inexistante");
      } else {
        console.log("‚ö†Ô∏è  Erreur inattendue:", error.response?.status);
      }
    }

    // Test avec nom trop court
    console.log("\n2Ô∏è‚É£ Test nom trop court...");
    const sessionResponse = await api.get(`/session/code/${TEST_SESSION_CODE}`);
    const session = sessionResponse.data.session;

    try {
      await api.post(`/session/${session.id}/join`, {
        participantName: "A", // Trop court
      });
      console.log("‚ùå Devrait avoir √©chou√©");
    } catch (error) {
      if (error.response?.status === 400) {
        console.log("‚úÖ Erreur 400 correcte pour nom trop court");
      } else {
        console.log("‚ö†Ô∏è  Erreur inattendue:", error.response?.status);
      }
    }

    // Test avec donn√©es manquantes
    console.log("\n3Ô∏è‚É£ Test donn√©es manquantes...");
    try {
      await api.post(`/session/${session.id}/join`, {});
      console.log("‚ùå Devrait avoir √©chou√©");
    } catch (error) {
      if (error.response?.status === 400) {
        console.log("‚úÖ Erreur 400 correcte pour donn√©es manquantes");
      } else {
        console.log("‚ö†Ô∏è  Erreur inattendue:", error.response?.status);
      }
    }

    console.log("\nüéâ Tests edge cases termin√©s");
  } catch (error) {
    console.error("‚ùå Erreur dans les tests edge cases:", error.message);
  }
}

async function showCurrentSessionState() {
  console.log("\nüìä === √âTAT ACTUEL DE LA SESSION ===\n");

  try {
    const response = await api.get(`/session/code/${TEST_SESSION_CODE}`);
    const session = response.data.session;

    console.log("Session details:", {
      id: session.id,
      code: session.code,
      title: session.title,
      status: session.status,
      participantCount: session.participantCount,
      maxParticipants: session.settings?.maxParticipants,
      canJoin: session.canJoin,
      allowLateJoin: session.settings?.allowLateJoin,
      allowAnonymous: session.settings?.allowAnonymous,
    });
  } catch (error) {
    console.error(
      "‚ùå Erreur lors de la r√©cup√©ration de l'√©tat:",
      error.message
    );
  }
}

// Fonction principale
async function main() {
  console.log(
    `üöÄ Test de l'API Join Session avec le code: ${TEST_SESSION_CODE}\n`
  );

  // V√©rifier l'√©tat initial
  await showCurrentSessionState();

  // Test principal
  await testJoinSessionFlow();

  // Tests edge cases
  await testJoinSessionEdgeCases();

  // √âtat final
  await showCurrentSessionState();

  console.log("\n‚ú® Tests termin√©s");
}

// Ex√©cuter si appel√© directement
if (require.main === module) {
  main();
}

module.exports = {
  testJoinSessionFlow,
  testJoinSessionEdgeCases,
  showCurrentSessionState,
};
